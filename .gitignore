node_modules
npm-debug.log
build/*
.DS_Store
.env
.vscode

# useEffect(() => {
#   const fetchRefreshToken = async () => {
#       const response = await axios.post(`/api/spotify/refresh`, { refreshToken });
#       setAccessToken(response.data.access_token);
#       setExpiryTime(response.data.expiry_time);
#   }
#   if (refreshToken && Date.now() >= expiryTime) fetchRefreshToken();
# }, [])



# spotifyRouter.post('/refresh',
#     spotifyController.useRefreshToken,
#     (req, res) => {
#         return res.status(200).json(res.locals.auth);
#     }
# );



# spotifyController.useRefreshToken = async (req, res, next) => {
#     const { refreshToken } = req.body;
#     const token_endpoint = 'https://accounts.spotify.com/api/token';
#     const auth_token = new Buffer.from(`${client_id}:${client_secret}`).toString('base64');
#     const data = qs.stringify({
#         grant_type: 'refresh_token',
#         refresh_token: refreshToken,
#     })
#     try {
#         const response = await axios.post(token_endpoint, data, {
#             headers: {
#                 'Authorization': `Basic ${auth_token}`,
#                 'Content-Type': 'application/x-www-form-urlencoded'
#             }
#         })
#         const expiryTime = Date.now() + (response.data.expires_in * 1000);
#         res.locals.auth = response.data;
#         res.locals.auth.expiry_time = expiryTime;
#         return next();
#     }
#     catch(err) {
#         return next({
#             log: `Error in spotifyController.useRefreshToken: ${err}`,
#             status: 500,
#             message: {err: 'Error occured while retrieving refresh token'},
#           });
#     }
# };